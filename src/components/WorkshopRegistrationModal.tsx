"use client"

import type React from "react"
import { useState } from "react"
import { useAuth } from "../contexts/AuthContext"
import { sendEmail, showNotification } from "../services/emailService"
import "./WorkshopRegistrationModal.css"

interface WorkshopRegistrationModalProps {
    workshop: any
    isOpen: boolean
    onClose: () => void
    onSuccess: () => void
}

const WorkshopRegistrationModal: React.FC<WorkshopRegistrationModalProps> = ({
                                                                                 workshop,
                                                                                 isOpen,
                                                                                 onClose,
                                                                                 onSuccess,
                                                                             }) => {
    const { user } = useAuth()
    const [formData, setFormData] = useState({
        fullName: user?.name || "",
        email: user?.email || "",
        phone: "",
        experience: "beginner",
        motivation: "",
        expectations: "",
        hasLaptop: true,
        dietaryRestrictions: "",
        emergencyContact: "",
        agreeTerms: false,
    })
    const [isSubmitting, setIsSubmitting] = useState(false)

    if (!isOpen || !workshop) return null

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault()
        if (!formData.agreeTerms) {
            showNotification("Vui l√≤ng ƒë·ªìng √Ω v·ªõi ƒëi·ªÅu kho·∫£n v√† ƒëi·ªÅu ki·ªán", "error")
            return
        }

        setIsSubmitting(true)

        try {
            // Simulate API call
            await new Promise((resolve) => setTimeout(resolve, 2000))

            // Save registration to localStorage
            const registrations = JSON.parse(localStorage.getItem("workshopRegistrations") || "[]")
            const newRegistration = {
                id: Date.now(),
                workshopId: workshop.id,
                workshopTitle: workshop.title,
                userId: user?.id || "guest",
                ...formData,
                registrationDate: new Date().toISOString(),
                status: "confirmed",
            }
            registrations.push(newRegistration)
            localStorage.setItem("workshopRegistrations", JSON.stringify(registrations))

            // Send notification email to teacher
            const emailSuccess = await sendEmail({
                to: "chaucao4325@gmail.com",
                subject: `üéâ ƒêƒÉng k√Ω workshop m·ªõi: ${workshop.title}`,
                body: `
<h2>Th√¥ng b√°o ƒëƒÉng k√Ω workshop m·ªõi</h2>

<p>C√≥ ng∆∞·ªùi d√πng m·ªõi ƒëƒÉng k√Ω workshop "<strong>${workshop.title}</strong>"</p>

<h3>Th√¥ng tin ng∆∞·ªùi ƒëƒÉng k√Ω:</h3>
<ul>
  <li><strong>H·ªç t√™n:</strong> ${formData.fullName}</li>
  <li><strong>Email:</strong> ${formData.email}</li>
  <li><strong>S·ªë ƒëi·ªán tho·∫°i:</strong> ${formData.phone}</li>
  <li><strong>Kinh nghi·ªám:</strong> ${formData.experience}</li>
  <li><strong>ƒê·ªông l·ª±c:</strong> ${formData.motivation}</li>
  <li><strong>K·ª≥ v·ªçng:</strong> ${formData.expectations}</li>
  <li><strong>C√≥ laptop:</strong> ${formData.hasLaptop ? "C√≥" : "Kh√¥ng"}</li>
  <li><strong>H·∫°n ch·∫ø ƒÉn u·ªëng:</strong> ${formData.dietaryRestrictions || "Kh√¥ng c√≥"}</li>
  <li><strong>Li√™n h·ªá kh·∫©n c·∫•p:</strong> ${formData.emergencyContact}</li>
</ul>

<h3>Th√¥ng tin workshop:</h3>
<ul>
  <li><strong>Ng√†y:</strong> ${new Date(workshop.startDate).toLocaleDateString("vi-VN")}</li>
  <li><strong>Th·ªùi gian:</strong> ${workshop.time}</li>
  <li><strong>Gi·∫£ng vi√™n:</strong> ${workshop.instructor}</li>
</ul>

<p><strong>Th·ªùi gian ƒëƒÉng k√Ω:</strong> ${new Date().toLocaleString("vi-VN")}</p>

<hr>
<p><em>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng DevShare</em></p>
        `,
                type: "workshop_registration",
            })

            if (emailSuccess) {
                showNotification("ƒêƒÉng k√Ω th√†nh c√¥ng! Gi·∫£ng vi√™n ƒë√£ ƒë∆∞·ª£c th√¥ng b√°o.", "success")
            }

            onSuccess()
            onClose()
        } catch (error) {
            showNotification("C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.", "error")
        } finally {
            setIsSubmitting(false)
        }
    }

    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
        const { name, value, type } = e.target
        setFormData({
            ...formData,
            [name]: type === "checkbox" ? (e.target as HTMLInputElement).checked : value,
        })
    }

    return (
        <div className="registration-modal-overlay" onClick={onClose}>
            <div className="registration-modal-content" onClick={(e) => e.stopPropagation()}>
                <div className="modal-header">
                    <h2>ƒêƒÉng k√Ω Workshop</h2>
                    <button className="close-btn" onClick={onClose}>
                        <i className="fas fa-times"></i>
                    </button>
                </div>

                <div className="workshop-info">
                    <h3>{workshop.title}</h3>
                    <div className="workshop-details">
            <span>
              <i className="fas fa-calendar"></i>
                {new Date(workshop.startDate).toLocaleDateString("vi-VN")}
            </span>
                        <span>
              <i className="fas fa-clock"></i>
                            {workshop.time}
            </span>
                        <span>
              <i className="fas fa-user"></i>
                            {workshop.instructor}
            </span>
                    </div>
                </div>

                <form onSubmit={handleSubmit} className="registration-form">
                    <div className="form-section">
                        <h4>Th√¥ng tin c√° nh√¢n</h4>
                        <div className="form-row">
                            <div className="form-group">
                                <label>H·ªç v√† t√™n *</label>
                                <input
                                    type="text"
                                    name="fullName"
                                    value={formData.fullName}
                                    onChange={handleChange}
                                    required
                                    placeholder="Nh·∫≠p h·ªç v√† t√™n"
                                />
                            </div>
                            <div className="form-group">
                                <label>Email *</label>
                                <input
                                    type="email"
                                    name="email"
                                    value={formData.email}
                                    onChange={handleChange}
                                    required
                                    placeholder="Nh·∫≠p email"
                                />
                            </div>
                        </div>

                        <div className="form-row">
                            <div className="form-group">
                                <label>S·ªë ƒëi·ªán tho·∫°i *</label>
                                <input
                                    type="tel"
                                    name="phone"
                                    value={formData.phone}
                                    onChange={handleChange}
                                    required
                                    placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                                />
                            </div>
                            <div className="form-group">
                                <label>M·ª©c ƒë·ªô kinh nghi·ªám *</label>
                                <select name="experience" value={formData.experience} onChange={handleChange} required>
                                    <option value="beginner">Ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu</option>
                                    <option value="intermediate">Trung c·∫•p</option>
                                    <option value="advanced">N√¢ng cao</option>
                                </select>
                            </div>
                        </div>
                    </div>

                    <div className="form-section">
                        <h4>Th√¥ng tin b·ªï sung</h4>
                        <div className="form-group">
                            <label>ƒê·ªông l·ª±c tham gia</label>
                            <textarea
                                name="motivation"
                                value={formData.motivation}
                                onChange={handleChange}
                                placeholder="T·∫°i sao b·∫°n mu·ªën tham gia workshop n√†y?"
                                rows={3}
                            ></textarea>
                        </div>

                        <div className="form-group">
                            <label>K·ª≥ v·ªçng t·ª´ workshop</label>
                            <textarea
                                name="expectations"
                                value={formData.expectations}
                                onChange={handleChange}
                                placeholder="B·∫°n mong mu·ªën h·ªçc ƒë∆∞·ª£c g√¨ t·ª´ workshop?"
                                rows={3}
                            ></textarea>
                        </div>

                        <div className="form-row">
                            <div className="form-group">
                                <label>Li√™n h·ªá kh·∫©n c·∫•p</label>
                                <input
                                    type="text"
                                    name="emergencyContact"
                                    value={formData.emergencyContact}
                                    onChange={handleChange}
                                    placeholder="T√™n v√† s·ªë ƒëi·ªán tho·∫°i ng∆∞·ªùi th√¢n"
                                />
                            </div>
                            <div className="form-group">
                                <label>H·∫°n ch·∫ø ƒÉn u·ªëng (n·∫øu c√≥)</label>
                                <input
                                    type="text"
                                    name="dietaryRestrictions"
                                    value={formData.dietaryRestrictions}
                                    onChange={handleChange}
                                    placeholder="VD: Chay, kh√¥ng ƒÉn h·∫£i s·∫£n..."
                                />
                            </div>
                        </div>

                        <div className="form-group checkbox">
                            <label>
                                <input type="checkbox" name="hasLaptop" checked={formData.hasLaptop} onChange={handleChange} />
                                T√¥i c√≥ laptop c√° nh√¢n ƒë·ªÉ th·ª±c h√†nh
                            </label>
                        </div>
                    </div>

                    <div className="form-section">
                        <div className="form-group checkbox">
                            <label>
                                <input type="checkbox" name="agreeTerms" checked={formData.agreeTerms} onChange={handleChange} />
                                T√¥i ƒë·ªìng √Ω v·ªõi{" "}
                                <a href="/terms" target="_blank" rel="noreferrer">
                                    ƒëi·ªÅu kho·∫£n v√† ƒëi·ªÅu ki·ªán
                                </a>{" "}
                                c·ªßa DevShare
                            </label>
                        </div>
                    </div>

                    <div className="form-actions">
                        <button type="button" onClick={onClose} className="btn-secondary">
                            H·ªßy
                        </button>
                        <button type="submit" disabled={isSubmitting} className="btn-primary">
                            {isSubmitting ? (
                                <>
                                    <i className="fas fa-spinner fa-spin"></i>
                                    ƒêang x·ª≠ l√Ω...
                                </>
                            ) : (
                                <>
                                    <i className="fas fa-user-plus"></i>
                                    ƒêƒÉng k√Ω ngay
                                </>
                            )}
                        </button>
                    </div>
                </form>
            </div>
        </div>
    )
}

export default WorkshopRegistrationModal
