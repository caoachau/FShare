{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"D:\\\\untitled7\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    // Check if user is logged in on app start\n    const savedUser = localStorage.getItem(\"devshare_user\");\n    if (savedUser) {\n      setUser(JSON.parse(savedUser));\n    }\n    setIsLoading(false);\n  }, []);\n  const login = async (email, password) => {\n    setIsLoading(true);\n\n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    // Mock authentication - check for admin credentials\n    if (email && password) {\n      let role = \"student\";\n      let permissions = [];\n\n      // Admin credentials\n      if (email === \"admin@devshare.com\" || email.includes(\"admin\")) {\n        role = \"admin\";\n        permissions = [\"manage_users\", \"manage_content\", \"manage_workshops\", \"manage_news\", \"delete_content\"];\n      } else if (email.includes(\"teacher\")) {\n        role = \"teacher\";\n        permissions = [\"create_workshops\", \"upload_content\"];\n      }\n      const mockUser = {\n        id: Date.now().toString(),\n        name: email.split(\"@\")[0],\n        email,\n        role,\n        joinDate: new Date().toISOString(),\n        avatar: `https://ui-avatars.com/api/?name=${email.split(\"@\")[0]}&background=667eea&color=fff`,\n        permissions\n      };\n      setUser(mockUser);\n      localStorage.setItem(\"devshare_user\", JSON.stringify(mockUser));\n      setIsLoading(false);\n      return true;\n    }\n    setIsLoading(false);\n    return false;\n  };\n  const register = async (name, email, password, role = \"student\") => {\n    setIsLoading(true);\n\n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    const permissions = role === \"teacher\" ? [\"create_workshops\", \"upload_content\"] : [];\n    const mockUser = {\n      id: Date.now().toString(),\n      name,\n      email,\n      role,\n      joinDate: new Date().toISOString(),\n      avatar: `https://ui-avatars.com/api/?name=${name}&background=667eea&color=fff`,\n      permissions\n    };\n    setUser(mockUser);\n    localStorage.setItem(\"devshare_user\", JSON.stringify(mockUser));\n    setIsLoading(false);\n    return true;\n  };\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem(\"devshare_user\");\n  };\n  const isAdmin = () => {\n    return (user === null || user === void 0 ? void 0 : user.role) === \"admin\";\n  };\n  const isTeacher = () => {\n    return (user === null || user === void 0 ? void 0 : user.role) === \"teacher\" || (user === null || user === void 0 ? void 0 : user.role) === \"admin\";\n  };\n  const value = {\n    user,\n    login,\n    register,\n    logout,\n    isLoading,\n    isAdmin,\n    isTeacher\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"YajQB7LURzRD+QP5gw0+K2TZIWA=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","_s2","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","context","Error","AuthProvider","children","user","setUser","isLoading","setIsLoading","savedUser","localStorage","getItem","JSON","parse","login","email","password","Promise","resolve","setTimeout","role","permissions","includes","mockUser","id","Date","now","toString","name","split","joinDate","toISOString","avatar","setItem","stringify","register","logout","removeItem","isAdmin","isTeacher","value","Provider","fileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/untitled7/src/contexts/AuthContext.tsx"],"sourcesContent":["\"use client\"\r\n\r\nimport type React from \"react\"\r\nimport { createContext, useContext, useState, useEffect, type ReactNode } from \"react\"\r\n\r\ninterface User {\r\n  id: string\r\n  name: string\r\n  email: string\r\n  avatar?: string\r\n  role: \"student\" | \"teacher\" | \"admin\"\r\n  joinDate: string\r\n  permissions?: string[]\r\n}\r\n\r\ninterface AuthContextType {\r\n  user: User | null\r\n  login: (email: string, password: string) => Promise<boolean>\r\n  register: (name: string, email: string, password: string, role?: \"student\" | \"teacher\") => Promise<boolean>\r\n  logout: () => void\r\n  isLoading: boolean\r\n  isAdmin: () => boolean\r\n  isTeacher: () => boolean\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined)\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext)\r\n  if (context === undefined) {\r\n    throw new Error(\"useAuth must be used within an AuthProvider\")\r\n  }\r\n  return context\r\n}\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null)\r\n  const [isLoading, setIsLoading] = useState(true)\r\n\r\n  useEffect(() => {\r\n    // Check if user is logged in on app start\r\n    const savedUser = localStorage.getItem(\"devshare_user\")\r\n    if (savedUser) {\r\n      setUser(JSON.parse(savedUser))\r\n    }\r\n    setIsLoading(false)\r\n  }, [])\r\n\r\n  const login = async (email: string, password: string): Promise<boolean> => {\r\n    setIsLoading(true)\r\n\r\n    // Simulate API call\r\n    await new Promise((resolve) => setTimeout(resolve, 1000))\r\n\r\n    // Mock authentication - check for admin credentials\r\n    if (email && password) {\r\n      let role: \"student\" | \"teacher\" | \"admin\" = \"student\"\r\n      let permissions: string[] = []\r\n\r\n      // Admin credentials\r\n      if (email === \"admin@devshare.com\" || email.includes(\"admin\")) {\r\n        role = \"admin\"\r\n        permissions = [\"manage_users\", \"manage_content\", \"manage_workshops\", \"manage_news\", \"delete_content\"]\r\n      } else if (email.includes(\"teacher\")) {\r\n        role = \"teacher\"\r\n        permissions = [\"create_workshops\", \"upload_content\"]\r\n      }\r\n\r\n      const mockUser: User = {\r\n        id: Date.now().toString(),\r\n        name: email.split(\"@\")[0],\r\n        email,\r\n        role,\r\n        joinDate: new Date().toISOString(),\r\n        avatar: `https://ui-avatars.com/api/?name=${email.split(\"@\")[0]}&background=667eea&color=fff`,\r\n        permissions,\r\n      }\r\n\r\n      setUser(mockUser)\r\n      localStorage.setItem(\"devshare_user\", JSON.stringify(mockUser))\r\n      setIsLoading(false)\r\n      return true\r\n    }\r\n\r\n    setIsLoading(false)\r\n    return false\r\n  }\r\n\r\n  const register = async (\r\n    name: string,\r\n    email: string,\r\n    password: string,\r\n    role: \"student\" | \"teacher\" = \"student\",\r\n  ): Promise<boolean> => {\r\n    setIsLoading(true)\r\n\r\n    // Simulate API call\r\n    await new Promise((resolve) => setTimeout(resolve, 1000))\r\n\r\n    const permissions = role === \"teacher\" ? [\"create_workshops\", \"upload_content\"] : []\r\n\r\n    const mockUser: User = {\r\n      id: Date.now().toString(),\r\n      name,\r\n      email,\r\n      role,\r\n      joinDate: new Date().toISOString(),\r\n      avatar: `https://ui-avatars.com/api/?name=${name}&background=667eea&color=fff`,\r\n      permissions,\r\n    }\r\n\r\n    setUser(mockUser)\r\n    localStorage.setItem(\"devshare_user\", JSON.stringify(mockUser))\r\n    setIsLoading(false)\r\n    return true\r\n  }\r\n\r\n  const logout = () => {\r\n    setUser(null)\r\n    localStorage.removeItem(\"devshare_user\")\r\n  }\r\n\r\n  const isAdmin = () => {\r\n    return user?.role === \"admin\"\r\n  }\r\n\r\n  const isTeacher = () => {\r\n    return user?.role === \"teacher\" || user?.role === \"admin\"\r\n  }\r\n\r\n  const value = {\r\n    user,\r\n    login,\r\n    register,\r\n    logout,\r\n    isLoading,\r\n    isAdmin,\r\n    isTeacher,\r\n  }\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}