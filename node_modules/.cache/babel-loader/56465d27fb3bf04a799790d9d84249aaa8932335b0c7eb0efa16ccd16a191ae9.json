{"ast":null,"code":"var _jsxFileName = \"D:\\\\untitled7\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    try {\n      const savedUser = localStorage.getItem(\"devshare_user\");\n      if (savedUser) {\n        setUser(JSON.parse(savedUser));\n      }\n    } catch (error) {\n      console.error('Error loading user from localStorage:', error);\n      localStorage.removeItem(\"devshare_user\");\n    }\n    setIsLoading(false);\n  }, []);\n  const login = async (email, password) => {\n    setIsLoading(true);\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    if (email && password) {\n      const mockUser = {\n        id: Date.now().toString(),\n        name: email.split(\"@\")[0],\n        email,\n        role: email.includes(\"teacher\") ? \"teacher\" : \"student\",\n        joinDate: new Date().toISOString(),\n        avatar: `https://ui-avatars.com/api/?name=${email.split(\"@\")[0]}&background=667eea&color=fff`\n      };\n      setUser(mockUser);\n      localStorage.setItem(\"devshare_user\", JSON.stringify(mockUser));\n      setIsLoading(false);\n      return true;\n    }\n    setIsLoading(false);\n    return false;\n  };\n  const register = async (name, email, password, role = \"student\") => {\n    setIsLoading(true);\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    const mockUser = {\n      id: Date.now().toString(),\n      name,\n      email,\n      role,\n      joinDate: new Date().toISOString(),\n      avatar: `https://ui-avatars.com/api/?name=${name}&background=667eea&color=fff`\n    };\n    setUser(mockUser);\n    localStorage.setItem(\"devshare_user\", JSON.stringify(mockUser));\n    setIsLoading(false);\n    return true;\n  };\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem(\"devshare_user\");\n  };\n  const value = {\n    user,\n    login,\n    register,\n    logout,\n    isLoading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 12\n  }, this);\n};\n_s2(AuthProvider, \"YajQB7LURzRD+QP5gw0+K2TZIWA=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","isLoading","setIsLoading","savedUser","localStorage","getItem","JSON","parse","error","console","removeItem","login","email","password","Promise","resolve","setTimeout","mockUser","id","Date","now","toString","name","split","role","includes","joinDate","toISOString","avatar","setItem","stringify","register","logout","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/untitled7/src/contexts/AuthContext.tsx"],"sourcesContent":["import type React from \"react\"\r\nimport { createContext, useContext, useState, useEffect, type ReactNode } from \"react\"\r\n\r\ninterface User {\r\n    id: string\r\n    name: string\r\n    email: string\r\n    avatar?: string\r\n    role: \"student\" | \"teacher\" | \"admin\"\r\n    joinDate: string\r\n}\r\n\r\ninterface AuthContextType {\r\n    user: User | null\r\n    login: (email: string, password: string) => Promise<boolean>\r\n    register: (name: string, email: string, password: string, role?: \"student\" | \"teacher\") => Promise<boolean>\r\n    logout: () => void\r\n    isLoading: boolean\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined)\r\n\r\nexport const useAuth = () => {\r\n    const context = useContext(AuthContext)\r\n    if (context === undefined) {\r\n        throw new Error(\"useAuth must be used within an AuthProvider\")\r\n    }\r\n    return context\r\n}\r\n\r\ninterface AuthProviderProps {\r\n    children: ReactNode\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n    const [user, setUser] = useState<User | null>(null)\r\n    const [isLoading, setIsLoading] = useState(true)\r\n\r\n    useEffect(() => {\r\n        try {\r\n            const savedUser = localStorage.getItem(\"devshare_user\")\r\n            if (savedUser) {\r\n                setUser(JSON.parse(savedUser))\r\n            }\r\n        } catch (error) {\r\n            console.error('Error loading user from localStorage:', error)\r\n            localStorage.removeItem(\"devshare_user\")\r\n        }\r\n        setIsLoading(false)\r\n    }, [])\r\n\r\n    const login = async (email: string, password: string): Promise<boolean> => {\r\n        setIsLoading(true)\r\n\r\n        await new Promise((resolve) => setTimeout(resolve, 1000))\r\n\r\n        if (email && password) {\r\n            const mockUser: User = {\r\n                id: Date.now().toString(),\r\n                name: email.split(\"@\")[0],\r\n                email,\r\n                role: email.includes(\"teacher\") ? \"teacher\" : \"student\",\r\n                joinDate: new Date().toISOString(),\r\n                avatar: `https://ui-avatars.com/api/?name=${email.split(\"@\")[0]}&background=667eea&color=fff`,\r\n            }\r\n\r\n            setUser(mockUser)\r\n            localStorage.setItem(\"devshare_user\", JSON.stringify(mockUser))\r\n            setIsLoading(false)\r\n            return true\r\n        }\r\n\r\n        setIsLoading(false)\r\n        return false\r\n    }\r\n\r\n    const register = async (\r\n        name: string,\r\n        email: string,\r\n        password: string,\r\n        role: \"student\" | \"teacher\" = \"student\",\r\n    ): Promise<boolean> => {\r\n        setIsLoading(true)\r\n\r\n        await new Promise((resolve) => setTimeout(resolve, 1000))\r\n\r\n        const mockUser: User = {\r\n            id: Date.now().toString(),\r\n            name,\r\n            email,\r\n            role,\r\n            joinDate: new Date().toISOString(),\r\n            avatar: `https://ui-avatars.com/api/?name=${name}&background=667eea&color=fff`,\r\n        }\r\n\r\n        setUser(mockUser)\r\n        localStorage.setItem(\"devshare_user\", JSON.stringify(mockUser))\r\n        setIsLoading(false)\r\n        return true\r\n    }\r\n\r\n    const logout = () => {\r\n        setUser(null)\r\n        localStorage.removeItem(\"devshare_user\")\r\n    }\r\n\r\n    const value = {\r\n        user,\r\n        login,\r\n        register,\r\n        logout,\r\n        isLoading,\r\n    }\r\n\r\n    return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}